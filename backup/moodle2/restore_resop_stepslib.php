<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Define all the restore steps that will be used by the restore_resop_activity_task
 *
 * @package   mod_resop
 * @category  backup
 * @copyright 2015 Your Name <your@email.adress>
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

/**
 * Structure step to restore one resop activity
 *
 * @package   mod_resop
 * @category  backup
 * @copyright 2015 Your Name <your@email.adress>
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class restore_resop_activity_structure_step extends restore_activity_structure_step {

    /**
     * Defines structure of path elements to be processed during the restore
     *
     * @return array of {@link restore_path_element}
     */
	 
    protected function define_structure() {

        $paths = array();
        $paths[] = new restore_path_element('resop', '/activity/resop');
		//analog zu backup_resop_steplibs
        $paths[] = new restore_path_element('resop_abt', '/activity/resop/departements/departement');
        $paths[] = new restore_path_element('resop_user', '/activity/resop/users/user');
		$paths[] = new restore_path_element('resop_resource_user', '/activity/resop/usedResources/usedResource');
        $paths[] = new restore_path_element('resop_resop_user', '/activity/resop/usedUsers/usedUser');
        $paths[] = new restore_path_element('resop_resource', '/activity/resop/resources/resource');

        // Return the paths wrapped into standard activity structure.
        return $this->prepare_activity_structure($paths);
    }


    /**
     * Process the given restore path element data
     *
     * @param array $data parsed element data
	 * 
	 * each function of this set is called for each entry generated by the backup, so as we have
	 * eg n resop_resource_user the function process_resop_resource_user is called n times
	 * it is necessary to change the id inside the data - I think so but where to get the right one
     */
    protected function process_resop($data) {
        global $DB;

        $data = (object)$data;
        $oldid = $data->id;
        $data->course = $this->get_courseid();

        if (empty($data->timecreated)) {
            $data->timecreated = time();
        }

        if (empty($data->timemodified)) {
            $data->timemodified = time();
        }

        if ($data->grade < 0) {
            // Scale found, get mapping.
            $data->grade = -($this->get_mappingid('scale', abs($data->grade)));
        }
		file_put_contents("/tmp/haeh.txt", var_export($data,true));
        // Create the resop instance.
        $newitemid = $DB->insert_record('resop', $data);
		file_put_contents("/tmp/haeh.txt","new is $newitemid ",FILE_APPEND);
        $this->apply_activity_instance($newitemid);	
    }

	protected function process_resop_resource_user($data){
		$data['actid'] = $this->task->get_activityid(); //ok replace the id
		
		file_put_contents("/tmp/haeh.txt", "\n resop_resource_user: ",FILE_APPEND);
		file_put_contents("/tmp/haeh.txt", var_export($data,true),FILE_APPEND);
	}
	protected function process_resop_resop_user($data){
		$data['actid'] = $this->task->get_activityid(); //ok replace the id
		file_put_contents("/tmp/haeh.txt", "\n resop_resop_user: ",FILE_APPEND);
		file_put_contents("/tmp/haeh.txt", var_export($data,true),FILE_APPEND);
	}
	protected function process_resop_resource($data){
		$data['actid'] = $this->task->get_activityid(); //replace id 
		file_put_contents("/tmp/haeh.txt", "\n resop_resource: ",FILE_APPEND);
		file_put_contents("/tmp/haeh.txt", var_export($data,true),FILE_APPEND);
	}
	protected function process_resop_abt($data){
		//only id and name, no actid
		file_put_contents("/tmp/haeh.txt", "\n resop_abt: ",FILE_APPEND);
		file_put_contents("/tmp/haeh.txt", var_export($data,true),FILE_APPEND);
	}
	protected function process_resop_user($data){
		//only id and name, no actid 
		file_put_contents("/tmp/haeh.txt", "\n resop_user: ",FILE_APPEND);		
		file_put_contents("/tmp/haeh.txt", var_export($data,true),FILE_APPEND);
	}
	

    /**
     * Post-execution actions
     */
    protected function after_execute() {
        // Add resop related files, no need to match by itemname (just internally handled context).
        $this->add_related_files('mod_resop', 'intro', null);
    }
}
